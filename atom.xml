<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不如摆烂鸟</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-12T04:53:47.590Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wzh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识线段树</title>
    <link href="http://example.com/2022/04/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <id>http://example.com/2022/04/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/</id>
    <published>2022-04-28T16:26:35.030Z</published>
    <updated>2022-05-12T04:53:47.590Z</updated>
    
    <content type="html"><![CDATA[<p>线段树的基础知识</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化(求线段和)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> l,<span class="type">int</span> r)</span>&#123;  </span><br><span class="line">    tree[i].l = l;</span><br><span class="line">    tree[i].r = r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">tree[i].</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单点修改，区间</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;线段树的基础知识&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="线段树" scheme="http://example.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>图的基础知识第二期</title>
    <link href="http://example.com/2022/04/28/graph_2/"/>
    <id>http://example.com/2022/04/28/graph_2/</id>
    <published>2022-04-28T11:36:06.030Z</published>
    <updated>2022-05-18T15:42:09.355Z</updated>
    
    <content type="html"><![CDATA[<p>本期讲述图的最小生成树，拓扑排序</p><span id="more"></span><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><h6 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF  100000 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ver_num;</span><br><span class="line">    <span class="type">int</span> edge_num;</span><br><span class="line">    <span class="type">int</span>** edge;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line">G g;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入顶点和边的个数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;g.ver_num,&amp;g.edge_num);</span><br><span class="line">    g.edge=(<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *)*g.ver_num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        g.edge[i]=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g.ver_num;j++)&#123;</span><br><span class="line">            g.edge[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        <span class="type">int</span> ver_1,ver_2;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请一次输入边的两个顶点：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ver_1,&amp;ver_2);</span><br><span class="line">        <span class="keyword">if</span>(ver_1&gt;g.ver_num || ver_2&gt;g.ver_num)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;超出界限&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入边的长度：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        getchar();</span><br><span class="line">        g.edge[ver_1<span class="number">-1</span>][ver_2<span class="number">-1</span>]=num;</span><br><span class="line">        g.edge[ver_2<span class="number">-1</span>][ver_1<span class="number">-1</span>]=num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MiniSpanTree</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> min =INF; </span><br><span class="line">    <span class="type">int</span>* mindistance = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="type">int</span>* join_ver = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line"></span><br><span class="line">    mindistance[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        mindistance[i] = g.edge[<span class="number">0</span>][i];</span><br><span class="line">        join_ver[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    join_ver[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最小生成树第一个结点: 1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        min = INF;</span><br><span class="line">        <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;g.ver_num;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(join_ver[j]==<span class="number">0</span> &amp;&amp; mindistance[j] &lt; min)&#123;</span><br><span class="line">                min = mindistance[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        join_ver[k] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;长度：%d,结点：%d \n&quot;</span>,mindistance[k],k+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;g.ver_num;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(join_ver[j]==<span class="number">0</span> &amp;&amp; g.edge[k][j] &lt; mindistance[j])&#123;</span><br><span class="line">                mindistance[j] = g.edge[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    CreateMap();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;节点加入的顺序：\n&quot;</span>);</span><br><span class="line">    MiniSpanTree();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="kruskal算法"><a href="#kruskal算法" class="headerlink" title="kruskal算法"></a>kruskal算法</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF  100000 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> begin;</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">&#125;Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ver_num;</span><br><span class="line">    <span class="type">int</span> edge_num;</span><br><span class="line">    Edge* edge;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line">G g;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateGraph</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入顶点和边的个数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;g.ver_num,&amp;g.edge_num);</span><br><span class="line">    g.edge=(Edge*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Edge)*g.edge_num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        g.edge[i].begin = INF;</span><br><span class="line">        g.edge[i].end = INF;</span><br><span class="line">        g.edge[i].weight = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        <span class="type">int</span> ver_1,ver_2;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请一次输入边的两个顶点：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ver_1,&amp;ver_2);</span><br><span class="line">        <span class="keyword">if</span>(ver_1&gt;g.ver_num || ver_2&gt;g.ver_num)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;超出界限&quot;</span>);</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入边的长度：\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num);</span><br><span class="line">        getchar();</span><br><span class="line">        g.edge[i].begin = ver_1;</span><br><span class="line">        g.edge[i].end = ver_2;</span><br><span class="line">        g.edge[i].weight = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MinSpanTree2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span>* join_ver = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="type">int</span>* join_edge = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.edge_num);</span><br><span class="line">    <span class="type">int</span> k,k1,k2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        join_ver[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        join_edge[i] = <span class="number">0</span> ; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        <span class="type">int</span> min = INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g.edge_num;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(join_edge[j] == <span class="number">0</span>  &amp;&amp; g.edge[j].weight &lt;min)&#123;</span><br><span class="line">                min = g.edge[j].weight;</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        k1 = g.edge[k].begin;</span><br><span class="line">        k2 = g.edge[k].end;</span><br><span class="line">        <span class="keyword">while</span>(join_ver[k1] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            k1 = join_ver[g.edge[k].begin];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(join_ver[k2] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            k2 = join_ver[g.edge[k].begin];</span><br><span class="line">        &#125;       </span><br><span class="line">        <span class="keyword">if</span>(k1 != k2)&#123;</span><br><span class="line">            join_ver[k1] = k2;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;起点：%d  终点：%d  长度：%d\n&quot;</span>,g.edge[k].begin,g.edge[k].end,g.edge[k].weight);</span><br><span class="line">        &#125; </span><br><span class="line">        join_edge[k] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    CreateGraph();</span><br><span class="line">    MinSpanTree2();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF  100000 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="comment">//边信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ver_index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"><span class="comment">//节点信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    EdgeNode* firstedge; </span><br><span class="line">&#125;VerNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span>&#123;</span></span><br><span class="line">    VerNode* Ver_list;</span><br><span class="line">    <span class="type">int</span> ver_num;</span><br><span class="line">    <span class="type">int</span> edge_num;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">&#125;Stack;</span><br><span class="line"></span><br><span class="line">G g;</span><br><span class="line">Stack s;</span><br><span class="line"><span class="type">int</span>* degree;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(Stack* s)</span>&#123;</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(Stack* s)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == <span class="number">-1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">push</span><span class="params">(Stack* s, <span class="type">int</span> x)</span>&#123;</span><br><span class="line">    s-&gt;data[++s-&gt;top] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">pop</span><span class="params">(Stack* s,<span class="type">int</span>* ptr)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(s)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    *ptr = s-&gt;data[s-&gt;top--];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateGraph</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入顶点数和边数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;g.ver_num,&amp;g.edge_num);</span><br><span class="line">    g.Ver_list = (VerNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(VerNode)*g.ver_num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        g.Ver_list[i].data=<span class="number">0</span>;</span><br><span class="line">        g.Ver_list[i].firstedge=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    degree = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        degree[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入边的信息：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        <span class="type">int</span> k1,k2;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;k1,&amp;k2);</span><br><span class="line">        <span class="keyword">if</span>(g.Ver_list[k1<span class="number">-1</span>].firstedge==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            g.Ver_list[k1<span class="number">-1</span>].firstedge=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            g.Ver_list[k1<span class="number">-1</span>].firstedge-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            g.Ver_list[k1<span class="number">-1</span>].firstedge-&gt;ver_index=k2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            EdgeNode* tem= g.Ver_list[k1<span class="number">-1</span>].firstedge;        </span><br><span class="line">            <span class="keyword">while</span>(tem-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                tem=tem-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            EdgeNode* p=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            p-&gt;ver_index=k2;</span><br><span class="line">            tem-&gt;next=p;</span><br><span class="line">        &#125;</span><br><span class="line">        degree[k2<span class="number">-1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">TopologicalSort</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span>* ptr = &amp;x;</span><br><span class="line">    InitStack(&amp;s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(degree[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            push(&amp;s,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!isEmpty(&amp;s))&#123;</span><br><span class="line">        pop(&amp;s,ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,*ptr); </span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">for</span>(EdgeNode* p = g.Ver_list[*ptr].firstedge; p !=<span class="literal">NULL</span> ; p=p-&gt;next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!(--degree[p-&gt;ver_index<span class="number">-1</span>]))&#123;</span><br><span class="line">                push(&amp;s,p-&gt;ver_index<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count &lt; g.ver_num)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    CreateGraph();</span><br><span class="line">    TopologicalSort();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本期讲述图的最小生成树，拓扑排序&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>排序方法</title>
    <link href="http://example.com/2022/04/25/sort/"/>
    <id>http://example.com/2022/04/25/sort/</id>
    <published>2022-04-25T09:26:47.386Z</published>
    <updated>2022-04-25T12:37:13.036Z</updated>
    
    <content type="html"><![CDATA[<p>几种排序方法：快排，归并排序，堆排序，希尔排序</p><span id="more"></span><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> i=left;</span><br><span class="line">    <span class="type">int</span> j=right;</span><br><span class="line">    <span class="type">int</span> x=a[left];</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">while</span>(i!=j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;a[j]&gt;=x)&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;=x)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            t=a[i];</span><br><span class="line">            a[i]=a[j];</span><br><span class="line">            a[j]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[left]=a[i];</span><br><span class="line">    a[i]=x;</span><br><span class="line">    quick_sort(a,left,i<span class="number">-1</span>);</span><br><span class="line">    quick_sort(a,i+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    quick_sort(a,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right,<span class="type">int</span>* tem)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k=left;</span><br><span class="line">    <span class="type">int</span> number=right-left+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k&lt;=mid&amp;&amp;j&lt;=right)&#123;   <span class="comment">//左右两个序列比较，取元素最小的放入数组中</span></span><br><span class="line">        <span class="keyword">if</span>(a[k]&lt;=a[j])&#123;</span><br><span class="line">            tem[i++]=a[k++];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tem[i++]=a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;mid)&#123;     <span class="comment">//左序列元素取完，剩下直接取右序列</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=right)&#123;</span><br><span class="line">            tem[i++]=a[j++];     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;right)&#123;    <span class="comment">//右序列元素取完，剩下直接取左序列</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;=mid)&#123;</span><br><span class="line">            tem[i++]=a[k++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;right-left+<span class="number">1</span>;i++)&#123;  <span class="comment">//将临时数组中已排好的元素放入原数组中</span></span><br><span class="line">        a[left+i]=tem[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span>* tem)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)  <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        merge_sort(a,left,mid,tem);</span><br><span class="line">        merge_sort(a,mid+<span class="number">1</span>,right,tem);</span><br><span class="line">        merge(a,left,mid,right,tem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *tem=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(a));  <span class="comment">//创建一个临时数组来对当前序列进行排序</span></span><br><span class="line">    <span class="built_in">memset</span>(tem,<span class="number">0</span>,<span class="keyword">sizeof</span>(tem));</span><br><span class="line">    merge_sort(a,<span class="number">0</span>,<span class="number">4</span>,tem);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(tem);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapinsert</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> len)</span>&#123;  <span class="comment">//将数组构造成二叉堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;       <span class="comment">//从第一个元素开始，每次加入一个元素进行处理</span></span><br><span class="line">        <span class="type">int</span> current_index =i;     </span><br><span class="line">        <span class="type">int</span> father_index = (i<span class="number">-1</span>)/<span class="number">2</span>;  <span class="comment">//二叉堆的结论</span></span><br><span class="line">        <span class="type">int</span> tem;</span><br><span class="line">        <span class="comment">//若当前节点大于父节点，则交换位置并继续与下一次父节点比较，是最后父节点始终比子节点大</span></span><br><span class="line">        <span class="keyword">while</span>(a[current_index] &gt; a[father_index])&#123;  </span><br><span class="line">            tem = a[current_index];</span><br><span class="line">            a[current_index] = a[father_index];</span><br><span class="line">            a[father_index] = tem;</span><br><span class="line">            current_index = father_index;</span><br><span class="line">            father_index = (current_index - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_resort</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> index,<span class="type">int</span> len)</span>&#123;  <span class="comment">//重构二叉堆，将根节点逐步下沉</span></span><br><span class="line">    <span class="type">int</span> lchild = <span class="number">2</span>*index + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> rchild = <span class="number">2</span>*index + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(lchild &lt; len)&#123;    <span class="comment">//将此节点与孩子节点比较，取孩子中最大的比较，并交换，使得父节点始终比子节点大</span></span><br><span class="line">        <span class="type">int</span> max_index;</span><br><span class="line">        <span class="keyword">if</span> (a[rchild] &gt; a[lchild] &amp;&amp; rchild &lt; len)&#123;</span><br><span class="line">            max_index = rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> max_index = lchild;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[index] &gt; a[max_index])&#123;</span><br><span class="line">            max_index = index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index == max_index) <span class="keyword">break</span>;  <span class="comment">//此时该节点处于正确的位置，则退出比较，重构完成</span></span><br><span class="line">        <span class="comment">//判断后交换</span></span><br><span class="line">        <span class="type">int</span> tem = a[index];</span><br><span class="line">        a[index] = a[max_index];</span><br><span class="line">        a[max_index] = tem;</span><br><span class="line">        <span class="comment">//此轮该节点与孩子节点已交换，并继续下一轮与子节点比较</span></span><br><span class="line">        index = max_index;</span><br><span class="line">        lchild = <span class="number">2</span>*index + <span class="number">1</span>;</span><br><span class="line">        rchild = <span class="number">2</span>*index + <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapsort</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">    heapinsert(a,len);  <span class="comment">//构造二叉堆</span></span><br><span class="line">    <span class="type">int</span> heap_len = len;</span><br><span class="line">    <span class="type">int</span> tem;</span><br><span class="line">    <span class="keyword">while</span>(heap_len &gt; <span class="number">1</span>)&#123;  <span class="comment">//没论将最大的节点与最小的交换，得到一个最大，再重构剩下的节点</span></span><br><span class="line">        tem = a[<span class="number">0</span>];</span><br><span class="line">        a[<span class="number">0</span>] = a[heap_len<span class="number">-1</span>];</span><br><span class="line">        a[heap_len<span class="number">-1</span>] = tem;</span><br><span class="line">        heap_len--;</span><br><span class="line">        heap_resort(a,<span class="number">0</span>,heap_len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">30</span>,<span class="number">13</span>,<span class="number">541</span>,<span class="number">13</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    heapsort(a,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span>* a ,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">int</span> tem = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shellsort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j, gap;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> (i = gap; i &lt; n; i++)</span><br><span class="line"><span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; a[j + gap]; j -= gap)</span><br><span class="line">Swap(a,j,j + gap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    shellsort(a,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;几种排序方法：快排，归并排序，堆排序，希尔排序&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="排序" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>大数的处理</title>
    <link href="http://example.com/2022/04/23/%E5%A4%A7%E6%95%B0/"/>
    <id>http://example.com/2022/04/23/%E5%A4%A7%E6%95%B0/</id>
    <published>2022-04-23T08:17:47.665Z</published>
    <updated>2022-05-12T04:54:11.713Z</updated>
    
    <content type="html"><![CDATA[<p>大数的假发，乘法与比较</p><span id="more"></span><p>大数的存储：字符串</p><p>大数加法：位与位相加并判断进位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">add</span><span class="params">(<span class="type">char</span> s1[],chars2[])</span>&#123;</span><br><span class="line">len_1 = <span class="built_in">strlen</span>(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;大数的假发，乘法与比较&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="大数" scheme="http://example.com/tags/%E5%A4%A7%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="http://example.com/2022/04/23/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    <id>http://example.com/2022/04/23/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-04-23T07:34:35.736Z</published>
    <updated>2022-05-12T04:54:06.046Z</updated>
    
    <content type="html"><![CDATA[<p>数的进制转换(2-16位)</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将输入的数转化为十进制</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">TransToTen</span><span class="params">(<span class="type">char</span> a[],<span class="type">int</span> b)</span>&#123; <span class="comment">//a为数，b为该数的进制</span></span><br><span class="line">    <span class="type">int</span> len,total;</span><br><span class="line">    <span class="type">int</span> num; num记录每一位上的数</span><br><span class="line">   total=<span class="number">0</span>;</span><br><span class="line">len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">num = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">            num = a[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        total = total*b + num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将十进制转化为其他进制</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">transport</span><span class="params">(<span class="type">int</span> m , <span class="type">int</span> c)</span>&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">if</span>(m)&#123;</span><br><span class="line">transport(m/c,b);</span><br><span class="line">        n=m%b;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,n+<span class="number">55</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;数的进制转换(2-16位)&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="进制转换" scheme="http://example.com/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>辗转相除法</title>
    <link href="http://example.com/2022/04/22/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/"/>
    <id>http://example.com/2022/04/22/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/</id>
    <published>2022-04-22T10:37:21.893Z</published>
    <updated>2022-05-12T04:53:57.237Z</updated>
    
    <content type="html"><![CDATA[<p>求最大公约数和最小公倍数</p><span id="more"></span><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//求最小公约数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,gcd(a,b)); <span class="comment">//最小公约数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a*b/gcd(a,b)); <span class="comment">//最小gong&#x27;be</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;求最大公约数和最小公倍数&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>图的基础知识</title>
    <link href="http://example.com/2022/04/21/graph/"/>
    <id>http://example.com/2022/04/21/graph/</id>
    <published>2022-04-21T12:48:45.518Z</published>
    <updated>2022-05-18T15:37:29.161Z</updated>
    
    <content type="html"><![CDATA[<p>图的遍历，最短路径</p><span id="more"></span><h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><h5 id="深度优先算法："><a href="#深度优先算法：" class="headerlink" title="深度优先算法："></a>深度优先算法：</h5><h5 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ver_num;</span><br><span class="line">    <span class="type">int</span> edge_num;</span><br><span class="line">    <span class="type">int</span>** edge;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line">G g;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* visited;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateMap</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入顶点数和边数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;g.ver_num,&amp;g.edge_num);</span><br><span class="line">    visited=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    g.edge=(<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *)*g.ver_num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        g.edge[i]=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">        <span class="built_in">memset</span>(g.edge[i],<span class="number">0</span>,<span class="keyword">sizeof</span>(g.edge[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入边的信息: \n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        <span class="type">int</span> ver_1,ver_2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ver_1,&amp;ver_2);</span><br><span class="line">        <span class="keyword">if</span>(ver_1&gt;g.ver_num || ver_2&gt;g.ver_num)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;不存在结点&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        g.edge[ver_1<span class="number">-1</span>][ver_2<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">        g.edge[ver_2<span class="number">-1</span>][ver_1<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从x开始遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse</span><span class="params">(<span class="type">int</span> x)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">1</span> || x&gt;g.ver_num)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不存在该节点&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(visited[x<span class="number">-1</span>]==<span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x);</span><br><span class="line">    visited[x<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=g.ver_num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(g.edge[x<span class="number">-1</span>][i<span class="number">-1</span>]==<span class="number">1</span> &amp;&amp; visited[i<span class="number">-1</span>]==<span class="number">0</span> )&#123;</span><br><span class="line">            traverse(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    CreateMap();</span><br><span class="line">    traverse(<span class="number">1</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="邻接链表"><a href="#邻接链表" class="headerlink" title="邻接链表"></a>邻接链表</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="comment">//边信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ver_index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">EdgeNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;EdgeNode;</span><br><span class="line"><span class="comment">//节点信息</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    EdgeNode* firstedge; </span><br><span class="line">&#125;VerNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">graph</span>&#123;</span></span><br><span class="line">    VerNode* Ver_list;</span><br><span class="line">    <span class="type">int</span> ver_num;</span><br><span class="line">    <span class="type">int</span> edge_num;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* visited;</span><br><span class="line"></span><br><span class="line">G g;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateGraph</span><span class="params">()</span>&#123;</span><br><span class="line">    visited = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*MAXSIZE);</span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*MAXSIZE);</span><br><span class="line">    g.Ver_list = (VerNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(VerNode)*MAXSIZE);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MAXSIZE;i++)&#123;</span><br><span class="line">        g.Ver_list[i].firstedge=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入顶点数和边数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;g.ver_num,&amp;g.edge_num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入边的信息：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        <span class="type">int</span> k1,k2;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;k1,&amp;k2);</span><br><span class="line">        <span class="keyword">if</span>(g.Ver_list[k1<span class="number">-1</span>].firstedge==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            g.Ver_list[k1<span class="number">-1</span>].firstedge=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            g.Ver_list[k1<span class="number">-1</span>].firstedge-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            g.Ver_list[k1<span class="number">-1</span>].firstedge-&gt;ver_index=k2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            EdgeNode* tem= g.Ver_list[k1<span class="number">-1</span>].firstedge;        </span><br><span class="line">            <span class="keyword">while</span>(tem-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                tem=tem-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            EdgeNode* p=(EdgeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EdgeNode));</span><br><span class="line">            p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">            p-&gt;ver_index=k2;</span><br><span class="line">            tem-&gt;next=p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历图，采用DFS</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">traverse</span><span class="params">(<span class="type">int</span> x)</span>&#123;  <span class="comment">//从第x个节点开始遍历</span></span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">1</span> || x &gt; g.ver_num )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不存在该节点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (visited[x<span class="number">-1</span>] == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,x);</span><br><span class="line">    visited[x<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">    EdgeNode* p=g.Ver_list[x<span class="number">-1</span>].firstedge;</span><br><span class="line">    <span class="keyword">for</span>(p;p!=<span class="literal">NULL</span>;p=p-&gt;next)&#123;</span><br><span class="line">        <span class="keyword">if</span> (visited[p-&gt;ver_index<span class="number">-1</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            traverse(p-&gt;ver_index);</span><br><span class="line">            visited[p-&gt;ver_index<span class="number">-1</span>] = <span class="number">1</span>;            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    CreateGraph();</span><br><span class="line">    traverse(<span class="number">1</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h4><h6 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF  100000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ver_num;</span><br><span class="line">    <span class="type">int</span> edge_num;</span><br><span class="line">    <span class="type">int</span>** edge;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line">G g;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>** D;</span><br><span class="line"><span class="type">int</span>** P;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateGraph</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;输入顶点和边的个数：\n&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;g.ver_num,&amp;g.edge_num);</span><br><span class="line">   g.edge=(<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *)*g.ver_num);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">      g.edge[i]=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g.ver_num;j++)&#123;</span><br><span class="line">         g.edge[i][j] = INF;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">      <span class="type">int</span> ver_1,ver_2;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;请一次输入边的两个顶点：\n&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ver_1,&amp;ver_2);</span><br><span class="line">      <span class="keyword">if</span>(ver_1&gt;g.ver_num || ver_2&gt;g.ver_num)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;超出界限&quot;</span>);</span><br><span class="line">         i--;</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">int</span> weight;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;输入边的权重：\n&quot;</span>);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;weight);</span><br><span class="line">      g.edge[ver_1<span class="number">-1</span>][ver_2<span class="number">-1</span>]=weight;</span><br><span class="line">      g.edge[ver_2<span class="number">-1</span>][ver_1<span class="number">-1</span>]=weight;</span><br><span class="line">   &#125;</span><br><span class="line">   D=(<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*)*g.ver_num);</span><br><span class="line">   P=(<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*)*g.ver_num);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">      D[i] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">      P[i] = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g.ver_num;j++)&#123;</span><br><span class="line">         D[i][j] = g.edge[i][j];</span><br><span class="line">         P[i][j] = j;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Floyd</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;g.ver_num;k++)  <span class="comment">//k为中间点</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)  <span class="comment">//i为起点</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g.ver_num;j++)  <span class="comment">//j为终点</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span>(D[i][j] &gt; (D[i][k]+D[k][j]))&#123;</span><br><span class="line">         D[i][j] = D[i][k]+D[k][j];</span><br><span class="line">         P[i][j] = P[i][k];</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">int</span> begin,end;</span><br><span class="line">   <span class="type">int</span> k;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;输入起点和终点：\n&quot;</span>);</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;begin,&amp;end);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%d -&gt; %d 的最短路径为%d\n&quot;</span>,begin,end,D[begin<span class="number">-1</span>][end<span class="number">-1</span>]);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;path : %d&quot;</span>,begin);</span><br><span class="line">   k = P[begin<span class="number">-1</span>][end<span class="number">-1</span>];</span><br><span class="line">   <span class="keyword">while</span>(k != end<span class="number">-1</span>)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,k+<span class="number">1</span>);</span><br><span class="line">      k = P[k][end<span class="number">-1</span>];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot; %d\n&quot;</span>,end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   CreateGraph();</span><br><span class="line">   Floyd();</span><br><span class="line">   system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INF  0x7fffffff </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ver_num;</span><br><span class="line">    <span class="type">int</span> edge_num;</span><br><span class="line">    <span class="type">int</span>** edge;</span><br><span class="line">&#125;G;</span><br><span class="line"></span><br><span class="line">G g;</span><br><span class="line"><span class="type">int</span>* visited;</span><br><span class="line"><span class="type">int</span>* distance;</span><br><span class="line"><span class="type">int</span>* p;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateGraph</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入顶点和边的个数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;g.ver_num,&amp;g.edge_num);</span><br><span class="line">    p=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);     </span><br><span class="line">    distance=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="built_in">memset</span>(distance,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);    </span><br><span class="line">    visited=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="built_in">memset</span>(visited,<span class="number">0</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    g.edge=(<span class="type">int</span> **)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span> *)*g.ver_num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        g.edge[i]=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g.ver_num;j++)&#123;</span><br><span class="line">            g.edge[i][j] = INF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.edge_num;i++)&#123;</span><br><span class="line">        <span class="type">int</span> ver_1,ver_2;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请一次输入边的两个顶点：\n&quot;</span>);         </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;ver_1,&amp;ver_2);</span><br><span class="line">        <span class="keyword">if</span>(ver_1&gt;g.ver_num || ver_2&gt;g.ver_num)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;超出界限&quot;</span>);</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> weight;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;输入边的权重：\n&quot;</span>);</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;weight);</span><br><span class="line">        g.edge[ver_1<span class="number">-1</span>][ver_2<span class="number">-1</span>]=weight;</span><br><span class="line">        g.edge[ver_2<span class="number">-1</span>][ver_1<span class="number">-1</span>]=weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dijkstra</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> begin,end;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入起点和终点：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;begin,&amp;end);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++)&#123;</span><br><span class="line">        distance[i]=g.edge[begin<span class="number">-1</span>][i];</span><br><span class="line">        <span class="keyword">if</span>(distance[i] == INF) p[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> p[i] = begin<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.ver_num;i++) visited[i]=<span class="number">0</span>;</span><br><span class="line">    visited[begin<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">    distance[begin<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> next = begin<span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> tem;</span><br><span class="line">    <span class="comment">//每次循环将一个节点加入最短路径集合中，共n-1次循环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=g.ver_num<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    tem=INF;</span><br><span class="line">        <span class="comment">//循环找到到集合路径最短的点，记录为next</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;g.ver_num;j++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[j]==<span class="number">0</span> &amp;&amp; distance[j] &lt; tem)&#123;</span><br><span class="line">    tem = distance[j];</span><br><span class="line">                next = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(next == begin<span class="number">-1</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">//将该点加入最短路径集合</span></span><br><span class="line">        visited[next] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//该点加入集合后将distance数组更新，使得未加入集合的点到集合的路径保持最短</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;g.ver_num;k++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(visited[k]==<span class="number">0</span> &amp;&amp; distance[k]&gt;distance[next]+g.edge[next][k] &amp;&amp; g.edge[next][k]!=INF)&#123;</span><br><span class="line">    <span class="comment">//若集合加入新节点后点k到集合最短路径改变则更新</span></span><br><span class="line">                distance[k] = distance[next]+g.edge[next][k]; </span><br><span class="line">                p[k] = next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最短路径大小为：%d \n&quot;</span>,distance[end<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="type">int</span>* a=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*g.ver_num);</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    a[count++] = end;</span><br><span class="line">    <span class="type">int</span> k = p[end<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">while</span>(k != begin<span class="number">-1</span>)&#123;</span><br><span class="line">        a[count++] = k+<span class="number">1</span>;</span><br><span class="line">        k = p[k];</span><br><span class="line">    &#125;</span><br><span class="line">    a[count++] = begin;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;path:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=count<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    CreateGraph();</span><br><span class="line">    Dijkstra();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;图的遍历，最短路径&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="图" scheme="http://example.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>程序员的自我修养-栈</title>
    <link href="http://example.com/2022/04/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    <id>http://example.com/2022/04/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</id>
    <published>2022-04-15T05:31:21.900Z</published>
    <updated>2022-04-15T05:39:43.050Z</updated>
    
    <content type="html"><![CDATA[<hr><p>程序员自我修养：关于栈的知识</p><span id="more"></span><p>程序员的自我修养</p><p>栈：面向过程</p><p>1.函数的调用惯例：(P317)<br>*参数的传递顺序和方式<br>*栈的维护方式<br>*名字修饰 -&gt;调用惯例的类型(cdecl,stdcall,fastcall)</p><p>2.函数返回值的传递（隐含参数）<br>值小于8字节时：<br>eax（4 bytes）:可用来储存函数返回值<br>eax+ ebx -&gt;存储5-8 字节的值<br>值大于8字节时：（eax作为指针指向临时对象）<br>*主函数在初始时为返回值开辟栈上的空间，作为临时对象temp<br>*将作为temp地址作为隐含参数传递到子函数中<br>*子函数调用时将数据拷贝给temp，并用eax传出temp地址<br>*子函数返回后，主函数将eax指向的temp内容拷贝给n<br>(n为接受返回值的变量)</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;p&gt;程序员自我修养：关于栈的知识&lt;/p&gt;</summary>
    
    
    
    <category term="程序员的自我修养" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/"/>
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的遍历</title>
    <link href="http://example.com/2022/04/15/BinaryTree/"/>
    <id>http://example.com/2022/04/15/BinaryTree/</id>
    <published>2022-04-15T03:13:42.720Z</published>
    <updated>2022-04-25T12:15:13.425Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><p>简单介绍二叉树</p><span id="more"></span><h4 id="二叉树的分类："><a href="#二叉树的分类：" class="headerlink" title="#二叉树的分类："></a>#二叉树的分类：</h4><p>完全二叉树</p><p>满二叉树</p><p>扩充二叉树</p><p>平衡二叉树</p><h4 id="二叉树四种遍历方式："><a href="#二叉树四种遍历方式：" class="headerlink" title="#二叉树四种遍历方式："></a>#二叉树四种遍历方式：</h4><p>前序遍历（根 -&gt; 左 -&gt; 右）</p><p>中序遍历（左 -&gt; 根 -&gt; 右）</p><p>后序遍历（左 -&gt; 右 -&gt; 根）</p><p>层次遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Bintree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Bintree Position</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">Elemtype data;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历    </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrderTraversal</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;data);    <span class="comment">//先访问根</span></span><br><span class="line">        PreOrderTraversal(BT-&gt;left); <span class="comment">//再访问左树</span></span><br><span class="line">        PreOrderTrabersal(BT-&gt;right);  <span class="comment">//最后访问右树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrderTraversal</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line">InOrderTraversal(BT-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;data);    </span><br><span class="line">        InOrderTraversal(BT-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrderTraversal</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(BT)&#123;</span><br><span class="line">PostOrderTraversal(BT-&gt;right);    </span><br><span class="line">        PostOrderTraversal(BT-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="#层序遍历"></a>#层序遍历</h3><h5 id="队列实现："><a href="#队列实现：" class="headerlink" title="队列实现："></a>队列实现：</h5><p>基本思路：根节点入队，读取根节点，根节点出队，左右节点入队，不断循环此过程，节点完全入队后不断出队</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Bintree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Bintree Position</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">Elemtype data;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队列实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 10000 <span class="comment">//最多元素个数</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrder</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BT==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">Bintree <span class="built_in">queue</span>[MAXSIZE]; <span class="comment">//创造一个队列</span></span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">queue</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(Bintree));</span><br><span class="line">    <span class="type">int</span> front=<span class="number">0</span>;  <span class="comment">//设置队列的头</span></span><br><span class="line">    <span class="type">int</span> rear=<span class="number">0</span>;   <span class="comment">//设置队列的尾</span></span><br><span class="line">    <span class="built_in">queue</span>[rear++]=BT; </span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123;  <span class="comment">//队列元素为空时退出循环</span></span><br><span class="line">Bintree tmp=<span class="built_in">queue</span>[front++]; <span class="comment">//读取根节点并出队</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Bintree-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(tmp-&gt;left!=<span class="literal">NULL</span>)&#123;      <span class="comment">//左节点入队</span></span><br><span class="line"><span class="built_in">queue</span>[rear++]=tmp-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp-&gt;right!=<span class="literal">NULL</span>)&#123;  <span class="comment">//右节点入队</span></span><br><span class="line"><span class="built_in">queue</span>[rear++]=tmp-&gt;right; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树遍历的实际应用"><a href="#二叉树遍历的实际应用" class="headerlink" title="#二叉树遍历的实际应用"></a>#二叉树遍历的实际应用</h4><h5 id="求二叉树的高度"><a href="#求二叉树的高度" class="headerlink" title="求二叉树的高度"></a>求二叉树的高度</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">height</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line"><span class="type">int</span> HL,HR,MAXH;</span><br><span class="line">    <span class="keyword">if</span>(BT)&#123;</span><br><span class="line">    HL = height(BT-&gt;left); <span class="comment">//左树的深度</span></span><br><span class="line">    HR = height(BT-&gt;right); <span class="comment">//右树的深度</span></span><br><span class="line">        MAXH=HL&gt;HR?HL:HR; <span class="comment">//该节点向下的最大深度</span></span><br><span class="line">        <span class="keyword">return</span> MAXH+<span class="number">1</span>;  <span class="comment">//最大深度加上这层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;简单介绍二叉树&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="二叉树" scheme="http://example.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>哈希表</title>
    <link href="http://example.com/2022/04/15/hash/"/>
    <id>http://example.com/2022/04/15/hash/</id>
    <published>2022-04-15T03:13:42.720Z</published>
    <updated>2022-04-25T12:20:08.357Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍哈希表</p><span id="more"></span><h4 id="哈希表的代码实现"><a href="#哈希表的代码实现" class="headerlink" title="#哈希表的代码实现"></a>#哈希表的代码实现</h4><p>哈希表的常见方法</p><p><img src="/2022/04/15/hash/1.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单介绍哈希表&lt;/p&gt;</summary>
    
    
    
    <category term="数据结构" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="哈希表" scheme="http://example.com/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
</feed>
