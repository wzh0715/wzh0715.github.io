<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>哈希表</title>
    <url>/2022/04/15/hash/</url>
    <content><![CDATA[<p>简单介绍哈希表</p>
<span id="more"></span>

<h4 id="哈希表的代码实现"><a href="#哈希表的代码实现" class="headerlink" title="#哈希表的代码实现"></a>#哈希表的代码实现</h4><p>哈希表的常见方法</p>
<p><img src="/2022/04/15/hash/1.jpg"></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历</title>
    <url>/2022/04/15/BinaryTree/</url>
    <content><![CDATA[<hr>
<hr>
<p>简单介绍二叉树</p>
<span id="more"></span>

<h4 id="二叉树的分类："><a href="#二叉树的分类：" class="headerlink" title="#二叉树的分类："></a>#二叉树的分类：</h4><p>完全二叉树</p>
<p>满二叉树</p>
<p>扩充二叉树</p>
<p>平衡二叉树</p>
<h4 id="二叉树四种遍历方式："><a href="#二叉树四种遍历方式：" class="headerlink" title="#二叉树四种遍历方式："></a>#二叉树四种遍历方式：</h4><p>前序遍历（根 -&gt; 左 -&gt; 右）</p>
<p>中序遍历（左 -&gt; 根 -&gt; 右）</p>
<p>后序遍历（左 -&gt; 右 -&gt; 根）</p>
<p>层次遍历</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Bintree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Bintree Position</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">	Elemtype data;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//先序遍历    </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreOrderTraversal</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(BT)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;data);    <span class="comment">//先访问根</span></span><br><span class="line">        PreOrderTraversal(BT-&gt;left); <span class="comment">//再访问左树</span></span><br><span class="line">        PreOrderTrabersal(BT-&gt;right);  <span class="comment">//最后访问右树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrderTraversal</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(BT)&#123;</span><br><span class="line">		InOrderTraversal(BT-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;data);    </span><br><span class="line">        InOrderTraversal(BT-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//后序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">PostOrderTraversal</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(BT)&#123;</span><br><span class="line">		PostOrderTraversal(BT-&gt;right);    </span><br><span class="line">        PostOrderTraversal(BT-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,BT-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="#层序遍历"></a>#层序遍历</h3><h5 id="队列实现："><a href="#队列实现：" class="headerlink" title="队列实现："></a>队列实现：</h5><p>基本思路：根节点入队，读取根节点，根节点出队，左右节点入队，不断循环此过程，节点完全入队后不断出队</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> *<span class="title">Bintree</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Bintree Position</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">	Elemtype data;</span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//队列实现</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 10000 <span class="comment">//最多元素个数</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">levelOrder</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BT==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line">	Bintree <span class="built_in">queue</span>[MAXSIZE]; <span class="comment">//创造一个队列</span></span><br><span class="line">    <span class="built_in">memset</span>(<span class="built_in">queue</span>,<span class="number">0</span>,<span class="keyword">sizeof</span>(Bintree));</span><br><span class="line">    <span class="type">int</span> front=<span class="number">0</span>;  <span class="comment">//设置队列的头</span></span><br><span class="line">    <span class="type">int</span> rear=<span class="number">0</span>;   <span class="comment">//设置队列的尾</span></span><br><span class="line">    <span class="built_in">queue</span>[rear++]=BT; </span><br><span class="line">    <span class="keyword">while</span>(front&lt;rear)&#123;  <span class="comment">//队列元素为空时退出循环</span></span><br><span class="line">		Bintree tmp=<span class="built_in">queue</span>[front++]; <span class="comment">//读取根节点并出队</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,Bintree-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(tmp-&gt;left!=<span class="literal">NULL</span>)&#123;      <span class="comment">//左节点入队</span></span><br><span class="line">			<span class="built_in">queue</span>[rear++]=tmp-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp-&gt;right!=<span class="literal">NULL</span>)&#123;  <span class="comment">//右节点入队</span></span><br><span class="line">			<span class="built_in">queue</span>[rear++]=tmp-&gt;right; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树遍历的实际应用"><a href="#二叉树遍历的实际应用" class="headerlink" title="#二叉树遍历的实际应用"></a>#二叉树遍历的实际应用</h4><h5 id="求二叉树的高度"><a href="#求二叉树的高度" class="headerlink" title="求二叉树的高度"></a>求二叉树的高度</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">height</span><span class="params">(Bintree BT)</span>&#123;</span><br><span class="line">	<span class="type">int</span> HL,HR,MAXH;</span><br><span class="line">    <span class="keyword">if</span>(BT)&#123;</span><br><span class="line">    	HL = height(BT-&gt;left); <span class="comment">//左树的深度</span></span><br><span class="line">    	HR = height(BT-&gt;right); <span class="comment">//右树的深度</span></span><br><span class="line">        MAXH=HL&gt;HR?HL:HR; <span class="comment">//该节点向下的最大深度</span></span><br><span class="line">        <span class="keyword">return</span> MAXH+<span class="number">1</span>;  <span class="comment">//最大深度加上这层</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>排序方法</title>
    <url>/2022/04/25/sort/</url>
    <content><![CDATA[<p>几种排序方法：快排，归并排序，堆排序，希尔排序</p>
<span id="more"></span>

<h5 id="1-快速排序"><a href="#1-快速排序" class="headerlink" title="1.快速排序"></a>1.快速排序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;right) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> i=left;</span><br><span class="line">    <span class="type">int</span> j=right;</span><br><span class="line">    <span class="type">int</span> x=a[left];</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">while</span>(i!=j)&#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;a[j]&gt;=x)&#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j&amp;&amp;a[i]&lt;=x)&#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</span><br><span class="line">            t=a[i];</span><br><span class="line">            a[i]=a[j];</span><br><span class="line">            a[j]=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[left]=a[i];</span><br><span class="line">    a[i]=x;</span><br><span class="line">    quick_sort(a,left,i<span class="number">-1</span>);</span><br><span class="line">    quick_sort(a,i+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    quick_sort(a,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-归并排序"><a href="#2-归并排序" class="headerlink" title="2.归并排序"></a>2.归并排序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> left,<span class="type">int</span> mid,<span class="type">int</span> right,<span class="type">int</span>* tem)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k=left;</span><br><span class="line">    <span class="type">int</span> number=right-left+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k&lt;=mid&amp;&amp;j&lt;=right)&#123;   <span class="comment">//左右两个序列比较，取元素最小的放入数组中</span></span><br><span class="line">        <span class="keyword">if</span>(a[k]&lt;=a[j])&#123;</span><br><span class="line">            tem[i++]=a[k++];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            tem[i++]=a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k&gt;mid)&#123;     <span class="comment">//左序列元素取完，剩下直接取右序列</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=right)&#123;</span><br><span class="line">            tem[i++]=a[j++];     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(j&gt;right)&#123;    <span class="comment">//右序列元素取完，剩下直接取左序列</span></span><br><span class="line">        <span class="keyword">while</span>(k&lt;=mid)&#123;</span><br><span class="line">            tem[i++]=a[k++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;right-left+<span class="number">1</span>;i++)&#123;  <span class="comment">//将临时数组中已排好的元素放入原数组中</span></span><br><span class="line">        a[left+i]=tem[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">merge_sort</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> left,<span class="type">int</span> right,<span class="type">int</span>* tem)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left&gt;=right)  <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        merge_sort(a,left,mid,tem);</span><br><span class="line">        merge_sort(a,mid+<span class="number">1</span>,right,tem);</span><br><span class="line">        merge(a,left,mid,right,tem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *tem=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(a));  <span class="comment">//创建一个临时数组来对当前序列进行排序</span></span><br><span class="line">    <span class="built_in">memset</span>(tem,<span class="number">0</span>,<span class="keyword">sizeof</span>(tem));</span><br><span class="line">    merge_sort(a,<span class="number">0</span>,<span class="number">4</span>,tem);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(tem);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-堆排序"><a href="#3-堆排序" class="headerlink" title="3.堆排序"></a>3.堆排序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapinsert</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> len)</span>&#123;  <span class="comment">//将数组构造成二叉堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;       <span class="comment">//从第一个元素开始，每次加入一个元素进行处理</span></span><br><span class="line">        <span class="type">int</span> current_index =i;     </span><br><span class="line">        <span class="type">int</span> father_index = (i<span class="number">-1</span>)/<span class="number">2</span>;  <span class="comment">//二叉堆的结论</span></span><br><span class="line">        <span class="type">int</span> tem;</span><br><span class="line">        <span class="comment">//若当前节点大于父节点，则交换位置并继续与下一次父节点比较，是最后父节点始终比子节点大</span></span><br><span class="line">        <span class="keyword">while</span>(a[current_index] &gt; a[father_index])&#123;  </span><br><span class="line">            tem = a[current_index];</span><br><span class="line">            a[current_index] = a[father_index];</span><br><span class="line">            a[father_index] = tem;</span><br><span class="line">            current_index = father_index;</span><br><span class="line">            father_index = (current_index - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heap_resort</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> index,<span class="type">int</span> len)</span>&#123;  <span class="comment">//重构二叉堆，将根节点逐步下沉</span></span><br><span class="line">    <span class="type">int</span> lchild = <span class="number">2</span>*index + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> rchild = <span class="number">2</span>*index + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(lchild &lt; len)&#123;    <span class="comment">//将此节点与孩子节点比较，取孩子中最大的比较，并交换，使得父节点始终比子节点大</span></span><br><span class="line">        <span class="type">int</span> max_index;</span><br><span class="line">        <span class="keyword">if</span> (a[rchild] &gt; a[lchild] &amp;&amp; rchild &lt; len)&#123;</span><br><span class="line">            max_index = rchild;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> max_index = lchild;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(a[index] &gt; a[max_index])&#123;</span><br><span class="line">            max_index = index;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index == max_index) <span class="keyword">break</span>;  <span class="comment">//此时该节点处于正确的位置，则退出比较，重构完成</span></span><br><span class="line">        <span class="comment">//判断后交换</span></span><br><span class="line">        <span class="type">int</span> tem = a[index];</span><br><span class="line">        a[index] = a[max_index];</span><br><span class="line">        a[max_index] = tem;</span><br><span class="line">        <span class="comment">//此轮该节点与孩子节点已交换，并继续下一轮与子节点比较</span></span><br><span class="line">        index = max_index;</span><br><span class="line">        lchild = <span class="number">2</span>*index + <span class="number">1</span>;</span><br><span class="line">        rchild = <span class="number">2</span>*index + <span class="number">2</span>; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapsort</span><span class="params">(<span class="type">int</span>* a,<span class="type">int</span> len)</span>&#123;</span><br><span class="line">    heapinsert(a,len);  <span class="comment">//构造二叉堆</span></span><br><span class="line">    <span class="type">int</span> heap_len = len;</span><br><span class="line">    <span class="type">int</span> tem;</span><br><span class="line">    <span class="keyword">while</span>(heap_len &gt; <span class="number">1</span>)&#123;  <span class="comment">//没论将最大的节点与最小的交换，得到一个最大，再重构剩下的节点</span></span><br><span class="line">        tem = a[<span class="number">0</span>];</span><br><span class="line">        a[<span class="number">0</span>] = a[heap_len<span class="number">-1</span>];</span><br><span class="line">        a[heap_len<span class="number">-1</span>] = tem;</span><br><span class="line">        heap_len--;</span><br><span class="line">        heap_resort(a,<span class="number">0</span>,heap_len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">30</span>,<span class="number">13</span>,<span class="number">541</span>,<span class="number">13</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    heapsort(a,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="4-希尔排序"><a href="#4-希尔排序" class="headerlink" title="4.希尔排序"></a>4.希尔排序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(<span class="type">int</span>* a ,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">    <span class="type">int</span> tem = a[i];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = tem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shellsort</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i, j, gap;</span><br><span class="line"> </span><br><span class="line">	<span class="keyword">for</span> (gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">for</span> (i = gap; i &lt; n; i++)</span><br><span class="line">			<span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; a[j] &gt; a[j + gap]; j -= gap)</span><br><span class="line">				Swap(a,j,j + gap);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    shellsort(a,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>图的基础知识</title>
    <url>/2022/04/21/%E5%9B%BE/</url>
    <content><![CDATA[<p>图的遍历，最小生成树，最短路径，拓扑排序</p>
<span id="more"></span>

<h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><h5 id="深度优先算法："><a href="#深度优先算法：" class="headerlink" title="深度优先算法："></a>深度优先算法：</h5><p>1.建立访问标记数组，标记节点是否已经遍历过</p>
<p>2.从初始起点出发，一直访问邻接的未被遍历的任一顶点，至不能再访问时回溯</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>大数的处理</title>
    <url>/2022/04/23/%E5%A4%A7%E6%95%B0/</url>
    <content><![CDATA[<p>大数的假发，乘法与比较</p>
<span id="more"></span>

<p>大数的存储：字符串</p>
<p>大数加法：位与位相加并判断进位</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* <span class="title function_">add</span><span class="params">(<span class="type">char</span> s1[],chars2[])</span>&#123;</span><br><span class="line">	len_1 = <span class="built_in">strlen</span>(s1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>大数</tag>
      </tags>
  </entry>
  <entry>
    <title>程序员的自我修养-栈</title>
    <url>/2022/04/15/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
    <content><![CDATA[<hr>
<p>程序员自我修养：关于栈的知识</p>
<span id="more"></span>

<p>程序员的自我修养</p>
<p>栈：面向过程</p>
<p>1.函数的调用惯例：(P317)<br>*参数的传递顺序和方式<br>*栈的维护方式<br>*名字修饰 -&gt;调用惯例的类型(cdecl,stdcall,fastcall)</p>
<p>2.函数返回值的传递（隐含参数）<br>值小于8字节时：<br>eax（4 bytes）:可用来储存函数返回值<br>eax+ ebx -&gt;存储5-8 字节的值<br>值大于8字节时：（eax作为指针指向临时对象）<br>*主函数在初始时为返回值开辟栈上的空间，作为临时对象temp<br>*将作为temp地址作为隐含参数传递到子函数中<br>*子函数调用时将数据拷贝给temp，并用eax传出temp地址<br>*子函数返回后，主函数将eax指向的temp内容拷贝给n<br>(n为接受返回值的变量)</p>
]]></content>
      <categories>
        <category>程序员的自我修养</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>辗转相除法</title>
    <url>/2022/04/22/%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95/</url>
    <content><![CDATA[<p>求最大公约数和最小公倍数</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//求最小公约数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="type">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,gcd(a,b)); <span class="comment">//最小公约数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a*b/gcd(a,b)); <span class="comment">//最小gong&#x27;be</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>进制转换</title>
    <url>/2022/04/23/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>数的进制转换(2-16位)</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将输入的数转化为十进制</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">TransToTen</span><span class="params">(<span class="type">char</span> a[],<span class="type">int</span> b)</span>&#123; <span class="comment">//a为数，b为该数的进制</span></span><br><span class="line">    <span class="type">int</span> len,total;</span><br><span class="line">    <span class="type">int</span> num; num记录每一位上的数</span><br><span class="line">   	total=<span class="number">0</span>;</span><br><span class="line">	len=<span class="built_in">strlen</span>(a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">			num = a[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[i]&gt;=<span class="string">&#x27;A&#x27;</span>&amp;&amp;a[i]&lt;=<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">            num = a[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        total = total*b + num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将十进制转化为其他进制</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">transport</span><span class="params">(<span class="type">int</span> m , <span class="type">int</span> c)</span>&#123;</span><br><span class="line">	<span class="type">int</span> tmp;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">if</span>(m)&#123;</span><br><span class="line">		transport(m/c,b);</span><br><span class="line">        n=m%b;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,n+<span class="number">55</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>进制转换</tag>
      </tags>
  </entry>
</search>
